public class Solution {https://oj.leetcode.com/problems/permutations-ii/
    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
        Arrays.sort(num);
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (num == null || num.length == 0) {
            return result;
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        boolean[] visited = new boolean[num.length];
        permutationii(result, list, num, visited);
        return result;
        
    }
    public void permutationii(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int[] num, boolean[] visited) {
        if (list.size() == num.length) {
            result.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = 0; i < num.length; i++){
            if (i > 0 && num[i] == num[i - 1] && !visited[i - 1]) {
                continue;
            }
            
            if (!visited[i]) {
                list.add(num[i]);
                visited[i] = true;
                permutationii(result, list, num, visited);
                list.remove(list.size() - 1);
                visited[i] = false;
            }
        }
    }
}
