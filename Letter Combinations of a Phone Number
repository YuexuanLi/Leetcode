//https://oj.leetcode.com/problems/letter-combinations-of-a-phone-number/
public class Solution {
    public ArrayList<String> letterCombinations(String digits) {
        ArrayList<String> result = new ArrayList<String>();
        if (digits == null) { //允许digits长度为0
            return result;
        }
        StringBuffer sb = new StringBuffer();
        HashMap<Character, char[]> map = new HashMap<Character, char[]>();
        map.put('0', new char[]{});
        map.put('1', new char[]{});
        map.put('2', new char[]{'a', 'b', 'c'});、、定义方法
        map.put('3', new char[]{'d', 'e', 'f'});
        map.put('4', new char[]{'g', 'h', 'i'});
        map.put('5', new char[]{'j', 'k', 'l'});
        map.put('6', new char[]{'m', 'n', 'o'});
        map.put('7', new char[]{'p', 'q', 'r', 's'});
        map.put('8', new char[]{'t', 'u', 'v'});
        map.put('9', new char[]{'w', 'x', 'y', 'z'});
        
        helper(result, sb, digits, map);
        return result;
        
    }
        

    private void helper(ArrayList<String> result, StringBuffer sb, String digits, HashMap<Character, char[]> map) {
        if (sb.length() == digits.length()) {
            result.add(sb.toString());
            return;
        }
        for (char c : map.get(digits.charAt(sb.length()))) { //注意要取char
            sb.append(c);
            helper(result, sb, digits, map);
            sb.deleteCharAt(sb.length() - 1); //注意要delete char
        }
    }
}
