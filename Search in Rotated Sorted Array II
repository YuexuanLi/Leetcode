//https://oj.leetcode.com/problems/search-in-rotated-sorted-array-ii/
public class Solution {//http://blog.csdn.net/linhuanmars/article/details/20588511  
    public boolean search(int[] A, int target) {
        if (A == null || A.length == 0) {
            return false;
        }
        int start = 0;
        int end = A.length - 1;
        int mid;
        
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (target == A[mid]) {
                return true;
            }
            if (A[start] < A[mid]) {
                if (target >= A[start] && target < A[mid]) {
                    end = mid;
                } else {
                    start = mid;
                }
            } else if (A[start] > A[mid]) {
                if (target > A[mid] && target <= A[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            } else {
                start++;
            }
        }
        if (A[start] == target || A[end] == target) {
            return true;
        }
        return false;
    }
}
