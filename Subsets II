//https://oj.leetcode.com/problems/subsets-ii/ 九章模板
public class Solution {
    public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
        Arrays.sort(num);
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        subset(result, list, num, 0);
        return result;
    }
    public void subset(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int[] num, int position) {
        result.add(new ArrayList(list));
        
        for (int i = position; i < num.length; i++) {
            if (i != position && num[i] == num[i - 1]) {
                continue;
            }  //i != position 等于说是在每次下一层递归时才会判断有效
            list.add(num[i]);
            subset(result, list, num, i + 1);
            list.remove(list.size() - 1);
        }
    }
}


//这个好像意义上更容易理解
public class Solution {
    public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
        Arrays.sort(num);
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        result.add(list);
        subset(result, list, num, 0);
        return result;
    }
    public void subset(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int[] num, int position) {
        for (int i = position; i < num.length; i++) {
            list.add(num[i]);
            result.add(new ArrayList(list));
            subset(result, list, num, i + 1);
            list.remove(list.size() - 1);
            while(i < num.length && num[i] == num[i - 1]){
            i++;
            }
        }
    }
}
