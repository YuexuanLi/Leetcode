public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (candidates == null || candidates.length == 0) {
            return result;
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        helper(result, list, candidates, target, 0);
        return result;
    }
    private void helper(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int[] candidate, int target, int index) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            result.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = index; i < candidate.length; i++) {
            if (i > 0 && candidate[i] == candidate[i - 1]) {
                continue;
            }
            list.add(candidate[i]);
            helper(result, list, candidate, target - candidate[i], i);
            list.remove(list.size() - 1);
        }
    }
}
