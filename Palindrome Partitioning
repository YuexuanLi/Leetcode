public class Solution { //https://oj.leetcode.com/problems/palindrome-partitioning/
    public ArrayList<ArrayList<String>> partition(String s) {
        ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
        if (s == null) {
            return result;
        }
        
        ArrayList<String> list = new ArrayList<String>();
        helper(result, list, s, 0);
        return result;
    }
    
    private boolean isPalindrome(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    private void helper(ArrayList<ArrayList<String>> result, ArrayList<String> list, String s, int pos){
        if (pos == s.length()){
            result.add(new ArrayList<String>(list));
            return;
        }
        
        for (int i = pos + 1; i <= s.length(); i++) {
            String sub = s.substring(pos, i);
            if (!isPalindrome(sub)) {
                continue;
            }
            list.add(sub);
            helper(result, list, s, i);
            list.remove(list.size() - 1);
        }
        
    }
}
