/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

//http://blog.csdn.net/linhuanmars/article/details/24509105

public class Solution {
	public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if (root == null)
			return result;

		ArrayList<Integer> list = new ArrayList<Integer>();
		LinkedList<TreeNode> stack = new LinkedList<TreeNode>();

		stack.push(root);
		list.add(root.val);
		result.add(list);

		int level = 1;

		while (!stack.isEmpty()) {
			LinkedList<TreeNode> newStack = new LinkedList<TreeNode>();
			list = new ArrayList<Integer>();

			while (!stack.isEmpty()) {
				TreeNode curr = stack.pop();

				if (level % 2 == 1) {
					if (curr.right != null) {
						newStack.push(curr.right);
						list.add(curr.right.val);
					}
					if (curr.left != null) {
						newStack.push(curr.left);
						list.add(curr.left.val);
					}
				} else {
					if (curr.left != null) {
						newStack.push(curr.left);
						list.add(curr.left.val);
					}
					if (curr.right != null) {
						newStack.push(curr.right);
						list.add(curr.right.val);
					}
				}

			}
			level++;
			if (list.size() > 0) {
				result.add(list);
			}
			stack = newStack;

		}
		return result;
	}

}
