//使用二分查找，时间复杂度为log(m+n). 该方法的核心是将原问题转变成一个寻找第k小数的问题（假设两个原序列升序排列），这样中位数实际上是第(m+n)/2小的数。所以只要解决了第k小数的问题，原问题也得以解决。首先假设数组A和B的元素个数都大于k/2，我们比较A[k/2-1]和B[k/2-1]两个元素，这两个元素分别表示A的第k/2小的元素和B的第k/2小的元素。这两个元素比较共有三种情况：>、<和=。如果A[k/2-1]<B[k/2-1]，这表示A[0]到A[k/2-1]的元素都在A和B合并之后的前k小的元素中。换句话说，A[k/2-1]不可能大于两数组合并之后的第k小值，所以我们可以将其抛弃。
//https://leetcode.com/problems/median-of-two-sorted-arrays/
public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
        int len = A.length + B.length;
        if (len % 2 == 0) {
            return (findKth(A, 0, B, 0, len / 2) + findKth(A, 0, B, 0, len / 2 + 1)) / 2.0;
        } else {
            return findKth(A, 0, B, 0, len / 2 + 1);
        }
    }
    private int findKth(int A[], int astart, int B[], int bstart, int k) {
        if (astart >= A.length) {
            return B[bstart + k - 1];
        }
        
        if (bstart >= B.length) {
            return A[astart + k - 1];
        }
        
        if (k == 1) {
             return Math.min(A[astart], B[bstart]);
        }
        
        int A_key = astart + k / 2 - 1 < A.length ? A[astart + k / 2 - 1] : Integer.MAX_VALUE;
        int B_key = bstart + k / 2 - 1 < B.length ? B[bstart + k / 2 - 1] : Integer.MAX_VALUE;
        
        if (A_key < B_key) {
            return findKth(A, astart + k / 2, B, bstart, k - k / 2);
        } else {
            return findKth(A, astart, B, bstart + k / 2, k - k / 2);
        }
    }
}
